#!/usr/bin/ksh

# {{{ CDDL HEADER
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source.  A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
# }}}

#
# Copyright 2017 OmniTI Computer Consulting, Inc. All rights reserved.
# Copyright 2019 OmniOS Community Edition (OmniOSce) Association.
#

#
# Build an ISO installer using the Kayak tools.
#

[ -x /opt/ooce/bin/pigz ] && GZIP=/opt/ooce/bin/pigz || GZIP=gzip
: ${GZIP_CMD:=$GZIP}

if [ "`id -u`" != "0" ]; then
	echo "You must use privileges to run this script."
	exit 1
fi

if [ -z "$BUILDSEND_MP" ]; then
	echo "Using /rpool/kayak_image for BUILDSEND_MP"
	BUILDSEND_MP=/rpool/kayak_image
fi

[ -z "$VERSION" ] && \
    VERSION="`head -1 $BUILDSEND_MP/miniroot/etc/release | awk '{print $3}'`"
echo "Using version $VERSION..."

stage()
{
	echo "***"
	echo "*** $*"
	echo "***"
}

# Allow temporary directory override
: ${TMPDIR:=/tmp}

# Files prepared by other parts of the kayak build process

KAYAK_MINIROOT=$BUILDSEND_MP/miniroot.ufs
ZFS_IMG=$BUILDSEND_MP/kayak_${VERSION}.zfs.xz

[ ! -f $KAYAK_MINIROOT -o ! -f $ZFS_IMG ] && echo "Missing files." && exit 1

# Mount-points

MINIROOT_ROOT=$TMPDIR/miniroot.$$
BA_ROOT=$TMPDIR/boot_archive.$$
UEFI_ROOT=$TMPDIR/uefi.$$
ISO_ROOT=$TMPDIR/iso_root.$$

# Image files

MINIROOT_FILE=$TMPDIR/miniroot_$$.img
BA_FILE=$TMPDIR/boot_archive_$$.img

# Parameters

# Calculate the boot archive size
typeset -i basz=225
[ -n "$BIGROOT" ] && ((basz += 1500))
[ -n "$RAMDISKINSTALL" ] && ((basz += 300))
BA_SIZE=${basz}M

# Comment the following line out to build a CSM-only ISO.
UEFI_SIZE=4400K

# Output file

DST_ISO=$BUILDSEND_MP/${VERSION}.iso

# Source of files needed for build

PROTO=
[ -n "$PREBUILT_ILLUMOS" -a -d $PREBUILT_ILLUMOS/proto/root_i386-nd ] \
    && PROTO=$PREBUILT_ILLUMOS/proto/root_i386-nd

#############################################################################
#
# The kayak mini-root is used for both the ISO root filesystem and for the
# miniroot that is loaded and mounted on / when booted.
#

set -o errexit

# First, uncompress the miniroot to a temporary file and mount it on
# $MINIROOT_ROOT

stage "Mounting source miniroot"
cp $KAYAK_MINIROOT $MINIROOT_FILE
LOFI_MINIROOT=`lofiadm -a $MINIROOT_FILE`
mkdir $MINIROOT_ROOT
mount $LOFI_MINIROOT $MINIROOT_ROOT

# Now create a UFS boot-archive image and mount it on $BA_ROOT

stage "Creating UFS image for boot archive"
mkfile $BA_SIZE $BA_FILE
LOFI_BA=`lofiadm -a $BA_FILE`
yes | newfs -m 0 $LOFI_BA
mkdir $BA_ROOT
mount $LOFI_BA $BA_ROOT

# Copy the files from the miniroot to the boot archive
sz=`du -sh $MINIROOT_ROOT | awk '{print $1}'`
stage "Adding files to the boot archive"
tar -cf - -C $MINIROOT_ROOT . | pv -s $sz | tar -xf - -C $BA_ROOT

# ...and to the ISO root
stage "Adding files to the ISO root"
mkdir $ISO_ROOT
tar -cf - -C $MINIROOT_ROOT . | pv -s $sz | tar -xf - -C $ISO_ROOT

# No longer need the source miniroot so unmount it and clean up the
# temporary file.
stage "Unmounting source miniroot"
umount $MINIROOT_ROOT
rmdir $MINIROOT_ROOT
lofiadm -d $LOFI_MINIROOT
rm $MINIROOT_FILE

#############################################################################
# Place the full ZFS image into the ISO root so it does not form part of the
# boot archive. This allows the installer to be booted even if there is not
# much available memory, and reduces the time taken to load the boot archive.
# With $RAMDISKINSTALL, put the image into the boot archive instead.

if [ -z "$RAMDISKINSTALL" ]; then
	stage "Adding ZFS image to ISO root"
	mkdir -p $ISO_ROOT/image
	pv $ZFS_IMG > $ISO_ROOT/image/`basename $ZFS_IMG`
	# Create a file to indicate that this is the right volume set on which
	# to find the image - see src/mount_media.c
	echo $VERSION > $ISO_ROOT/.volsetid
else
	stage "Adding ZFS image directly to boot archive"
	mkdir -p $BA_ROOT/.cdrom/image
	pv $ZFS_IMG > $BA_ROOT/.cdrom/image/`basename $ZFS_IMG`
	echo $VERSION > $BA_ROOT/.cdrom/.volsetid
fi

#############################################################################
# Add .p5p files to the ISO root containing the packages required for running
# under various VM environments.

stage "Adding p5p files"
mkdir -p $ISO_ROOT/image/p5p
for p in $BUILDSEND_MP/*.p5p; do
	[ -f "$p" ] || exit 1
	echo "* $p"
	cp $p $ISO_ROOT/image/p5p/
done

#############################################################################
# Put additional files into the boot-archive on $BA_ROOT, which is
# what will be / (via ramdisk) once the ISO is booted.

stage "Adding extra files to the boot archive"

# Extra files
for dir in bin; do
	[ -d $BA_ROOT/kayak/$dir ] || mkdir -p $BA_ROOT/kayak/$dir
	cp -p $dir/* $BA_ROOT/kayak/$dir/
done

if [ -n "$REFRESH_KAYAK" ]; then
	# For testing, make sure files in boot archive are current
	find $BA_ROOT/kayak -type f | while read f; do
		[ -f "$f" ] || continue
		echo "REFRESH $f"
		cp ${f#*/kayak/} $f
	done
	cp etc/* $BA_ROOT/kayak/etc/
	#rsync -avr $PROTO/boot/ $ISO_ROOT/boot/
fi

# Have initialboot invoke an interactive installer.
cat <<EOF > $BA_ROOT/.initialboot
/kayak/bin/takeover-console /kayak/installer/kayak-menu
exit 0
EOF

# Increase the timeout
SVCCFG_REPOSITORY=$BA_ROOT/etc/svc/repository.db \
    svccfg -s system/initial-boot setprop "start/timeout_seconds=86400"

# Refresh the devices on the miniroot.
devfsadm -r $BA_ROOT

add_to_boot_archive() {
	dir=$1; shift

	[ -n "$PROTO" -a -d $PROTO/$dir ] && src=$PROTO || src=/

	echo "Adding $dir/$@ to the boot archive"

	tar -cf - -C $src/$dir ${@:-.} | tar -xf - -C $BA_ROOT/$dir
}

add_to_boot_archive usr/share/lib/zoneinfo
add_to_boot_archive usr/share/lib/keytables
add_to_boot_archive usr/share/lib/terminfo
add_to_boot_archive usr/gnu/share/terminfo
add_to_boot_archive usr/sbin ping
add_to_boot_archive usr/bin netstat

######################################################################
# Configure the loader for installer

stage "Loader Configuration"

cat <<EOF > $ISO_ROOT/boot/loader.conf.local
loader_menu_title="Welcome to the OmniOS installer"
autoboot_delay=10
ooce_version="$VERSION"
boot_resolution="800x600x8"
console="text,ttya"
EOF

# Add option to boot from hard disk
cat << EOM > $ISO_ROOT/boot/menu.rc.local
set mainmenu_caption[6]="Boot from [H]ard Disk"
set mainmenu_keycode[6]=104
set mainansi_caption[6]="Boot from ^[1mH^[mard Disk"
s" efi-version" getenv? [if]
  set mainmenu_command[6]="chain disk0p1:/efi/boot/bootx64.efi"
[else]
  set mainmenu_command[6]="chain disk0:"
[then]
EOM

######################################################################

#
# The new miniroot is populated.
# Close it up and install it on $ISO_ROOT as the boot archive.
#
stage "Boot Archive Miniroot Size"
df -h $BA_ROOT
stage "Unmounting boot archive image"
umount $BA_ROOT
rmdir $BA_ROOT
lofiadm -d $LOFI_BA

stage "Installing boot archive to ISO root"
pv $BA_FILE | $GZIP_CMD -9c > $ISO_ROOT/platform/i86pc/amd64/boot_archive.gz
ls -lh $ISO_ROOT/platform/i86pc/amd64/boot_archive.gz | awk '{print $5}'
digest -a sha1 $BA_FILE > $ISO_ROOT/platform/i86pc/amd64/boot_archive.hash
rm -f $BA_FILE
stage "Removing unecessary files from ISO root"
rm -rf $ISO_ROOT/{usr,bin,sbin,lib,kernel}
stage "ISO root size: `du -sh $ISO_ROOT/.`"

# And finally, burn the ISO.

if [ -n "$UEFI_SIZE" ]; then
	for comp in loader32.efi loader64.efi pmbr isoboot; do
		if [ -n "$PROTO" -a -f $PROTO/boot/$comp ]; then
			echo "Using $comp from proto"
			eval COMP_${comp//./_}=$PROTO/boot/$comp
		elif [ -f /boot/$comp ]; then
			echo "Using $comp from running system"
			eval COMP_${comp//./_}=/boot/$comp
		else
			echo "Cannot find $comp"
			rm -rf $ISO_ROOT
			exit 1
		fi
	done

	# Create a UEFI bootblock
	stage "Building UEFI bootblock"
	UEFI_FILE=$ISO_ROOT/boot/efiboot.img
	mkfile $UEFI_SIZE $UEFI_FILE
	LOFI_UEFI=`lofiadm -a $UEFI_FILE`
	yes | mkfs -F pcfs \
	    -o b=System,nofdisk,size=8800 ${LOFI_UEFI/lofi/rlofi}
	mkdir $UEFI_ROOT
	mount -F pcfs $LOFI_UEFI $UEFI_ROOT
	mkdir -p $UEFI_ROOT/efi/boot
	cp ${COMP_loader32_efi} $UEFI_ROOT/efi/boot/bootia32.efi
	cp ${COMP_loader64_efi} $UEFI_ROOT/efi/boot/bootx64.efi
	df -h $UEFI_ROOT
	umount $UEFI_ROOT
	rmdir $UEFI_ROOT
	lofiadm -d $LOFI_UEFI

	stage "Building ISO"

	mkisofs \
		-omit-version-number \
		-full-iso9660-filenames \
		-rock \
		-untranslated-filenames \
		-omit-period \
		-disable-deep-relocation \
		-allow-multidot \
		-no-iso-translate \
		-cache-inodes \
		\
		-volid "OmniOS $VERSION" \
		-output $DST_ISO \
		\
		-eltorito-catalog .catalog \
		-eltorito-boot boot/cdboot -no-emul-boot -boot-info-table \
		-eltorito-alt-boot \
		-eltorito-platform efi \
		-eltorito-boot boot/`basename $UEFI_FILE` -no-emul-boot \
		\
		$ISO_ROOT

	######################################################################
	# Convert ISO to a hybrid image which can be written to a USB drive
	# This is taken from:
	#   https://github.com/tsoome/slim_source/commit/a8cdb4a40b57fddaa152ef

	stage "Converting ISO to hybrid image"

	LOFI_ISO=`lofiadm -la $DST_ISO`
	[ -n "$LOFI_ISO" ] || exit 1

	RLOFI_ISO=${LOFI_ISO/dsk/rdsk}
	P2LOFI_ISO=${RLOFI_ISO/p0/p2}

	# Look for the ESP in the ISO image
	for entry in `etdump --format shell $DST_ISO`; do
		echo "--> $entry"
		eval $entry
		[ "$et_platform" = "efi" ] || continue
		((et_lba = et_lba * 2048 / 512))
		espparam="239:0:0:0:0:0:0:0:$et_lba:$et_sectors"
		break
	done

	if [ -n "$espparam" ]; then
		# The system area will start at sector 64
		fdisk -A 190:0:0:0:0:0:0:0:3:60 $RLOFI_ISO
		fdisk -A $espparam $RLOFI_ISO
		installboot -fm $COMP_pmbr $COMP_isoboot $P2LOFI_ISO

		echo
		echo "Partition table after"
		fdisk -W - $RLOFI_ISO | tail -5 | head -3
	fi

	lofiadm -d $LOFI_ISO
else
	mkisofs \
		-omit-version-number \
		-full-iso9660-filenames \
		-rock \
		-untranslated-filenames \
		-omit-period \
		-disable-deep-relocation \
		-allow-multidot \
		-no-iso-translate \
		-cache-inodes \
		\
		-volid "OmniOS $VERSION" \
		-output $DST_ISO \
		\
		-eltorito-catalog .catalog \
		-eltorito-boot boot/cdboot -no-emul-boot -boot-load-size 4 \
		-boot-info-table \
		\
		$ISO_ROOT
fi

rm -rf $ISO_ROOT
stage "$DST_ISO is ready"
ls -lh $DST_ISO

# Vim hints
# vim:fdm=marker
