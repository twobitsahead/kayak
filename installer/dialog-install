#!/usr/bin/bash

# {{{ CDDL HEADER
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source. A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
# }}}

#
# Copyright 2017 OmniTI Computer Consulting, Inc. All rights reserved.
# Copyright 2022 OmniOS Community Edition (OmniOSce) Association.
#

. /kayak/lib/defs.sh
. /kayak/lib/install_help.sh
. /kayak/lib/dialog.sh
. /kayak/lib/utils.sh
. /kayak/lib/vm.sh
. /kayak/lib/disk_help.sh

SetupLog /tmp/kayak.log

keyboard_layout=${1:-US-English}

tmpf=`mktemp`

##########################################################################
# Disk selection

log "installer: disk selection"

# Under KVM, the disks don't show up on the first invocation of diskinfo.
# More investigation required but, for now, run it twice.
diskinfo >/dev/null

diskinfo -H | tr "\t" "^" > $tmpf.disks
if [ ! -f /.cdrom/.volsetid ]; then
	d_msg "Installation media not found."
	exit 0
fi

# Find the disk device associated with the installation media so that it can
# be excluded from the list of installation targets.
dev="`df -k /.cdrom | nawk '/devices/ { gsub(/:.*/, ""); print }'`"
if [ -n "$dev" ]; then
	idisk="`ls -l /dev/dsk/*p0 | grep "$dev" | awk '{print $9}'`"
	idisk="`basename ${idisk/p0/}`"
	[ -n "$idisk" ] && sed -i "/\\^$idisk\\^/d" $tmpf.disks
fi

if [ ! -s $tmpf.disks ]; then
	d_msg "No disks found."
	exit 0
fi

logcmd cat $tmpf.disks

declare -a args=()
# SCSI    c0t0d1  SEAGATE ST300MP0005      279.40 GiB     no      no
#   -     c2t0d0  Virtio  Block Device     300.00 GiB     no      no
exec 3<$tmpf.disks
while read line <&3; do
	dev="`echo $line | cut -d^ -f2`"
	vid="`echo $line | cut -d^ -f3`"
	pid="`echo $line | cut -d^ -f4`"
	size="`echo $line | cut -d^ -f5`"
	option=`printf "%-20s %s" "$vid $pid" "$size"`

	args+=("$dev" "$option" off)
done
exec 3<&-

while :; do
	dialog \
		--title "Select disks for installation" \
		--colors \
		--checklist "\nSelect disks using arrow keys and space bar.\nIf you select multiple disks, you will be able to choose a RAID level on the next screen.\n\Zn" \
		0 0 0 \
		"${args[@]}" 2> $tmpf

	[ $? -ne 0 ] && exit 0

	DISKLIST="`cat $tmpf`"
	rm -f $tmpf
	if [ -z "$DISKLIST" ]; then
		d_msg "No disks selected"
		continue
	fi
	break
done

log "installer: selected disks '$DISKLIST'"

# Check if any selected disks are part of an existing zpool. This can happen
# if the installer is re-run.
flag=0
for disk in $DISKLIST; do
	if zpool status | grep -F " $disk"; then
		d_msg "$disk is part of an active ZFS pool."
		flag=1
	fi
done
[ $flag -eq 1 ] && exit 0

test_rpool() {
	log "Testing rpool"
	logcmd mkfile 64m /tmp/test.$$
	if [ $? != 0 ]; then
		[ -f /tmp/test.$$ ] && rm -f /tmp/test.$$
		d_msg "WARNING: Insufficient space in /tmp for installation..."
		return 1
	fi
	logcmd zpool create "$1" /tmp/test.$$
	if [ $? != 0 ]; then
		d_msg "Can't test zpool create $1"
		rm -f /tmp/test.$$
		return 1
	fi
	logcmd zpool destroy "$1"
	rm -f /tmp/test.$$
	return 0
}

##########################################################################
# Pool RAID level

ztype=
typeset -i ndisks="`echo $DISKLIST | wc -w`"
if [ "$ndisks" -gt 1 ]; then
	ztype=mirror

	typeset -a args=()

	args+=(stripe "Striped (no redundancy)" off)
	args+=(mirror "${ndisks}-way mirror" on)
	[ "$ndisks" -ge 3 ] && args+=(raidz "raidz  (single-parity)" off)
	[ "$ndisks" -ge 4 ] && args+=(raidz2 "raidz2 (dual-parity)" off)
	[ "$ndisks" -ge 5 ] && args+=(raidz3 "raidz3 (triple-parity)" off)

	dialog \
	    --title "RAID level" \
	    --colors \
	    --default-item $ztype \
	    --radiolist "\nSelect the desired pool configuration\n\Zn" \
	    12 50 0 \
	    "${args[@]}" 2> $tmpf
	[ $? -ne 0 ] && exit 0
	ztype="`cat $tmpf`"
	rm -f $tmpf
fi

log "installer: selected RAID level '$ztype'"
[ "$ztype" = "stripe" ] && ztype=

##########################################################################
# Root pool name function

get_rpool_name()
{
	NRPOOL="$RPOOL"
	while :; do
		dialog \
			--title "Enter the root pool name" \
			--colors \
			--inputbox '\nThis is the name of the ZFS pool that will be created using the selected disks and used for the OmniOS installation.\n\nThe default name is \Z7rpool\Zn and should usually be left unchanged.\n\Zn' \
			16 40 "$NRPOOL" 2> $tmpf
		[ $? -ne 0 ] && return
		NRPOOL="`cat $tmpf`"
		rm -f $tmpf
		[ -z "$NRPOOL" ] && continue
		[[ "$NRPOOL" =~ ^[a-z][-_a-z0-9]*$ ]] && break
		d_msg "Invalid pool name, $NRPOOL"
	done
	RPOOL="$NRPOOL"
	log "installer: RPOOL name '$RPOOL'"
}

##########################################################################
# Root pool properties

cont_label='>>> Continue <<<'
cont_text=''
cont_help="`d_centre 'Continue with the installation.'`"

RPOOL=rpool
rpool_label='Root pool name'
rpool_help="`d_centre 'Customise the name of the root pool if required.'`"

PSCHEMES=(UEFI GPT MBR GPT+Active GPT+Slot1)
PSCHEMES_HELP=(
  'Use GPT scheme with UEFI boot partition, recommended.'
  'Use GPT scheme, without UEFI boot partition.'
  'Use traditional MBR scheme, supports disks up to 2TB.'
  'Use GPT scheme but mark partition as active to work around BIOS bugs.'
  'Use GPT scheme but place pMBR in slot 1 to work around BIOS bugs.'
)
PSCHEME="${PSCHEMES[0]}"
PSCHEME_HELP="${PSCHEMES_HELP[0]}"
pscheme_label='Partitioning Scheme'
pscheme_help="`d_centre "$PSCHEME_HELP"`"

COMPRESSION=YES
compression_label='Compression'
compression_help="`d_centre 'Choose whether to enable LZ4 compression on the pool (recommended).'`"

SFORCES=(No 4K 8K)
SFORCES_HELP=(
    'Use largest block size advertised by disks.'
    'Force at least 4K sector size.'
    'Force at least 8K sector size.'
)
SFORCE="${SFORCES[0]}"
SFORCE_HELP="${SFORCES_HELP[0]}"
sforce_label='Force sector size'
sforce_help="`d_centre "$SFORCE_HELP"`"

cycle()
{
	declare -a arr=("${!1}")
	local val="$2"

	for i in "${!arr[@]}"; do
		[ "${arr[$i]}" = "$val" ] && break
	done
	((i = i + 1))
	[ $i -ge ${#arr[@]} ] && i=0
	echo ${arr[$i]}
}

YESNO=(YES NO)
function toggle { cycle YESNO[@] "$@"; }

defaultitem="$cont_label"
while :; do
	dialog \
	  --title "ZFS Root Pool Configuration" \
	  --colors \
	  --item-help \
	  --no-ok --no-cancel \
	  --default-item "$defaultitem" \
	  --menu "\nIf desired, customise aspects of the ZFS Root Pool below; the recommended values have been filled in automatically. Select \Z7Continue\Zn when ready to proceed.\n\Zn" \
	  0 0 0 \
	  "$cont_label"		"$cont_text"	"$cont_help" \
	  "$rpool_label"	"$RPOOL"	"$rpool_help" \
	  "$pscheme_label"	"$PSCHEME" 	"$pscheme_help" \
	  "$compression_label"	"$COMPRESSION"	"$compression_help" \
	  "$sforce_label"	"$SFORCE"	"$sforce_help" \
	  2> $tmpf
	stat=$?

	[ $stat -ne 0 ] && exit 0

	opt="`cat $tmpf`"
	defaultitem="$opt"
	case $opt in
	    "$cont_label")
		if zpool list -H -o name | egrep -s "^$RPOOL\$"; then
			dialog --defaultno --yesno \
			    "\nPool already exists, overwrite?" 7 50
			[ $? = 0 ] || continue
			dialog --defaultno --yesno \
			    "\nConfirm destruction of existing pool?" 7 50
			[ $? = 0 ] || continue
			d_info "Destroying pool..."
			logcmd zpool destroy "$RPOOL"
		fi
		d_info "Checking system..."
		test_rpool "$RPOOL" && break
		d_msg "Invalid root pool name"
		defaultitem="$rpool_label"
		continue
		;;
	    "$rpool_label")       get_rpool_name ;;
	    "$pscheme_label")
		PSCHEME="`cycle PSCHEMES[@] "$PSCHEME"`"
		PSCHEME_HELP="`cycle PSCHEMES_HELP[@] "$PSCHEME_HELP"`"
		pscheme_help="`d_centre "$PSCHEME_HELP"`"
		log "Selected partitioning scheme: $PSCHEME"
		;;
	    "$compression_label")
		COMPRESSION="`toggle "$COMPRESSION"`"
		log "Selected compression: $COMPRESSION"
		;;
	    "$sforce_label")
		SFORCE="`cycle SFORCES[@] "$SFORCE"`"
		SFORCE_HELP="`cycle SFORCES_HELP[@] "$SFORCE_HELP"`"
		sforce_help="`d_centre "$SFORCE_HELP"`"
		log "Selected block size: $SFORCE"
		;;
	esac
done

##########################################################################
# Create root pool

d_info "Creating $RPOOL..."

case $SFORCE in
	4K)	ashift=12 ;;
	8K)	ashift=13 ;;
	*)	ashift=0 ;;
esac

NO_COMPRESSION=
[ "$COMPRESSION" = "YES" ] || NO_COMPRESSION=1
export NO_COMPRESSION

_DISKLIST="$DISKLIST"
_FLAGS=f
_OPTS=

[ $ashift != 0 ] && _OPTS+=" -o ashift=$ashift"

case "$PSCHEME" in
	UEFI)
		_FLAGS+=B
		# The zpool slice will now be slice 1 but slice 0 may have a
		# pool label from a previous installation. Clear it out.
		for disk in $DISKLIST; do
			logcmd zpool labelclear -f ${disk}s0
		done
		;;
	MBR)
		_DISKLIST=
		for disk in $DISKLIST; do
			# Single Solaris2 partition
			if ! logcmd fdisk -B ${disk}p0; then
				d_msg "Failed to partition $disk"
				exit 0
			fi
			# At this point, the disk will have three slices:
			#	s0	entire disk
			#	s2	entire disk
			#	s8	reserved boot area
			# with s0 and s8 overlapping.

			# Fix this by first removing slice 0
			logcmd fmthard -d 0:0:0:0:0 /dev/rdsk/${disk}p0

			# Create slice 0 covering all of the non-reserved space
			OIFS="$IFS"; IFS=" ="
			set -- `prtvtoc -f /dev/rdsk/${disk}p0`
			IFS="$OIFS"
			# FREE_START=16065 FREE_SIZE=196608 FREE_COUNT=1...
			start=$2; size=$4
			logcmd fmthard -d 0:2:01:$start:$size \
			    /dev/rdsk/${disk}p0

			_DISKLIST+="${disk}s0 "
		done
		;;
esac

if ! logcmd zpool create -$_FLAGS $_OPTS "$RPOOL" $ztype $_DISKLIST || \
   ! logcmd zpool list $RPOOL; then
	d_msg "Failed to create root pool"
	exit 0
fi

pool_guid="`zpool list -H -o guid $RPOOL`"
log "installer: pool GUID '$pool_guid'"

# These options work around BIOS bugs on some systems.

fixdb=
case $PSCHEME in
    GPT+Active)
	log "Adjusting pool for $PSCHEME"
	logcmd zpool export $RPOOL
	for disk in $DISKLIST; do
		# Set first entry in PMBR active
		logcmd fdisk -E 0:1 ${disk}p0
	done
	logcmd zpool import $pool_guid
	fixdb="pmbr_active=1"
	;;
    GPT+Slot1)
	log "Adjusting pool for $PSCHEME"
	logcmd zpool export $RPOOL
	for disk in $DISKLIST; do
		# Move first PMBR entry to slot 1
		logcmd fdisk -E 1:0 ${disk}p0
	done
	logcmd zpool import $pool_guid
	fixdb="pmbr_slot=1"
	;;
esac

if logcmd zpool list $RPOOL; then
	d_info "Successfully created $RPOOL..."
else
	d_msg "Problem creating pool..."
	exit 0
fi

###########################################################################
# Prompt for additional information

prompt_hostname omnios
prompt_timezone

ZFS_IMAGE=/.cdrom/image/*.zfs.xz
d_info "Preparing to install..."

# Because of kayak's small miniroot, just use C as the language for now.
LANG=C

bename=omnios
ver=`head -1 /etc/release | awk '{print $3}'`
[ -n "$ver" ] && bename+="-$ver"

BuildBE $RPOOL $ZFS_IMAGE $bename
ApplyChanges $HOSTNAME $TZ $LANG $keyboard_layout \
    || bomb "Could not apply changes."
MakeBootable $RPOOL $bename || bomb "Could not make bootable"

######################################################################
# Apply some additional settings for interactive installations.

# Disable SSH (can be re-enabled via the configuration menu)
[ -f /kayak/etc/nossh.xml ] && \
    logcmd cp /kayak/etc/nossh.xml $ALTROOT/etc/svc/profile/site/

# Use rsyslog as the default log daemon
if [ -f /kayak/etc/rsyslog.xml ]; then
	logcmd cp /kayak/etc/rsyslog.xml $ALTROOT/etc/svc/profile/site/
	logadm_rsyslog $ALTROOT
fi

# Add extra repo (can be disabled in the configuration menu)
extrarepo -on

# If a VM environment is detected, perform additional steps
setupvm

######################################################################

efifixdb=$ALTROOT/usr/share/hwdata/efi.fixes
if [ -n "$fixdb" -a -f $efifixdb ]; then
	# Update EFI fix database for this system based on the specific fix
	# selected before installation.
	manu="`smbios -t SMB_TYPE_SYSTEM \
	    | awk '$1 == "Manufacturer:" { print $2}'`"
	(
		echo "# Added by kayak during installation"
		echo "sys.manufacturer=\"$manu\" $fixdb"
	) >> $efifixdb
fi

log "Installation complete"

CopyInstallLog

if [ -f /tmp/INSTALLATION_FAILED ]; then
	d_msg "`cat /tmp/INSTALLATION_FAILED`"
elif beadm list -H $bename 2>/dev/null; then
	dialog \
		--colors \
		--title "Installation Complete" \
		--msgbox "\\n\
`beadm list | sed 's/$/\\\\n/'`\\n\
$RPOOL now has a functional and mounted boot environment.\\n\
\\n\
Once back at the main menu, the initial system setting can be configured,\\n\
a reboot can be performed, or a shell can be entered to configure the BE.\\n\\Zn\
" 0 0
else
	d_msg "A BE does not appear to be present -- something went wrong.\\nUsing the shell, run 'beadm list' for more information."
fi

exit 0

